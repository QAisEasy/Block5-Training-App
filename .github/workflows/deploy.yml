name: Deploy to QA

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: QA
    
    steps:
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT }}
        script: |
          # Переходим в директорию проекта
          cd /opt/ecommerce || {
            echo "Project directory not found, creating..."
            sudo mkdir -p /opt/ecommerce
            sudo chown -R $USER:$USER /opt/ecommerce
            cd /opt/ecommerce
          }
          
          # Если репозиторий еще не склонирован, клонируем его
          if [ ! -d ".git" ]; then
            echo "Cloning repository..."
            git clone https://github.com/${{ github.repository }}.git .
          else
            echo "Pulling latest changes..."
            git fetch origin
            git reset --hard origin/${{ github.ref_name }}
          fi
          
          # Создаем .env файлы если их нет
          if [ ! -f ".env.db" ]; then
            echo "Creating .env.db file..."
            cat > .env.db << 'EOL'
          MYSQL_ROOT_PASSWORD=rootpassword
          MYSQL_DATABASE=mydatabase
          MYSQL_USER=user
          MYSQL_PASSWORD=password
          EOL
          fi
          
          if [ ! -f ".env.app" ]; then
            echo "Creating .env.app file..."
            cat > .env.app << 'EOL'
          DATABASE_URL=mysql+pymysql://user:password@db/mydatabase
          EOL
          fi
          
          if [ ! -f ".env.sales" ]; then
            echo "Creating .env.sales file..."
            cat > .env.sales << 'EOL'
          DATABASE_URL=mysql+pymysql://user:password@db/mydatabase
          EOL
          fi
          
          # Даем права на выполнение скриптам
          chmod +x docker-manager.sh
          
          # Останавливаем старые контейнеры
          echo "Stopping old containers..."
          ./docker-manager.sh stop || true
          
          # Запускаем контейнеры
          echo "Starting containers..."
          ./docker-manager.sh start
          
          # Ждем пока база данных запустится
          echo "Waiting for database to be ready..."
          sleep 15
          
          # Загружаем demo данные (только при первом деплое)
          if [ ! -f ".db_initialized" ]; then
            echo "Loading demo data..."
            # Находим контейнер базы данных
            DB_CONTAINER=$(docker ps --format "table {{.Names}}" | grep -E "db|mysql" | head -1)
            if [ ! -z "$DB_CONTAINER" ]; then
              if [ -f "./common/db/dump/dump.sql" ]; then
                docker exec -i $DB_CONTAINER sh -c 'exec mysql -u user -ppassword mydatabase' < ./common/db/dump/dump.sql && \
                touch .db_initialized && \
                echo "Demo data loaded successfully!"
              else
                echo "Warning: dump.sql not found"
              fi
            else
              echo "Warning: Database container not found"
            fi
          fi
          
          echo "Deployment completed!"
          
          # Показываем статус контейнеров
          docker ps

  health-check:
    needs: deploy
    runs-on: ubuntu-latest
    environment: QA
    
    steps:
    - name: Wait for services to start
      run: sleep 30
      
    - name: Check Product Service Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:8000/docs || echo "000")
        echo "Product Service HTTP Response: $response"
        if [ "$response" = "200" ]; then
          echo "✅ Product service is healthy"
        else
          echo "❌ Product service is not responding correctly"
          echo "Trying to get more info..."
          curl -v http://${{ secrets.SERVER_HOST }}:8000/docs || true
          exit 1
        fi
    
    - name: Check Sales Service Health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}:8001/docs || echo "000")
        echo "Sales Service HTTP Response: $response"
        if [ "$response" = "200" ]; then
          echo "✅ Sales service is healthy"
        else
          echo "❌ Sales service is not responding correctly"
          echo "Trying to get more info..."
          curl -v http://${{ secrets.SERVER_HOST }}:8001/docs || true
          exit 1
        fi
    
    - name: Summary
      run: |
        echo "🎉 Deployment successful!"
        echo "📦 Product Service: http://${{ secrets.SERVER_HOST }}:8000/docs"
        echo "💰 Sales Service: http://${{ secrets.SERVER_HOST }}:8001/docs"